#! /usr/bin/env ruby

# For testing, create initial values for the 1024
# elements of the pixel buffer.  There are 800
# visible pixels, so the last 224 values aren't
# important

# Generate the 6x6x6 RGB color cube values that 256-color xterms use
# (or at least the version of it we get with 444 truecolor output.) We'll
# make each color 4 pixels wide, which means 864 pixels (so some of them
# won't be visible.) Also, we'll reverse sort them to hopefully guarantee
# that the leftmost column of pixels won't be black (which is helpful for
# ensuring that all of the pixels are where they should be.

# It's quite convenient how we get exactly 6 evenly-spaced
# intensity grades with a 4-bit color component value.
intensity = [ 0, 3, 6, 9, 12, 15 ]

colors = []
(0..5).each do |r|
  (0..5).each do |g|
    (0..5).each do |b|
      value = (r << 8) | (g << 4) | b
      4.times { colors.push(value) }
    end
  end
end

colors.reverse!

puts "// Generated by gen_init_pixbuf.rb"
puts ""

i = 0
colors.each do |color|
  puts "pixel_data[10'd#{i}] = 16'd#{color};"
  i += 1
end

while i < 1024
  puts "pixel_data[10'd#{i}] = 16'd0;"
  i += 1
end

puts ""
s = 'vim'
puts "// #{s}:ft=verilog:"
